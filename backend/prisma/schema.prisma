// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    url      = env("DATABASE_URL")
}

model VotingDeck {
    id        Int      @id @default(autoincrement())
    users     User[]
    cards     Card[]
    status    String
    votes     Vote[]
    title     String
    type      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model CustomDeck {
    id  Int @id @default(autoincrement())
    userId Int
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    cards Card[]
    title String
    type String
}

model User {
    id                     Int             @id @default(autoincrement())
    firstName              String
    lastName               String
    email                  String
    passwordHash           String
    friends                User[]          @relation("Friends")
    friendsOf              User[]          @relation("Friends")
    createdAt              DateTime        @default(now())
    updatedAt              DateTime        @updatedAt
    votingDeck             VotingDeck[]
    customDeck             CustomDeck[]
    votes                  Vote[]
    sentFriendRequests     FriendRequest[] @relation("Sender")
    receivedFriendRequests FriendRequest[] @relation("Receiver")
}

model Card {
    id        Int        @id @default(autoincrement())
    title     String
    content   String
    photoURL  String?
    link      String?
    votingDeckId    Int
    customDeckId Int
    votingDeck      VotingDeck @relation(fields: [votingDeckId], references: [id], onDelete: Cascade)
    customDeck      CustomDeck @relation(fields: [customDeckId], references: [id], onDelete: Cascade)
    createdAt DateTime   @default(now())
    updatedAt DateTime   @updatedAt
    votes     Vote[]
}

model Vote {
    id        Int        @id @default(autoincrement())
    deckId    Int
    userId    Int
    cardId    Int
    deck      VotingDeck @relation(fields: [deckId], references: [id], onDelete: Cascade)
    user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
    card      Card       @relation(fields: [cardId], references: [id], onDelete: Cascade)
    createdAt DateTime   @default(now())
    updatedAt DateTime   @updatedAt
}

model FriendRequest {
    id        Int      @id @default(autoincrement())
    status    String    
    senderId  Int
    receiverId Int
    sender    User     @relation("Sender", fields: [senderId], references: [id], onDelete: Cascade)
    receiver  User     @relation("Receiver", fields: [receiverId], references: [id], onDelete: Cascade)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}
